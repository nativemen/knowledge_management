name: Build and Deploy LaTeX Documents

on:
  push:
    paths:
      - 'math/matrix_algebra/matrix_algebra_learning_notes/**.tex'
      - '.github/workflows/latex.yml'
    branches:
      - main
      - master
  pull_request:
    branches:
      - main
      - master
  workflow_dispatch:

env:
  MAIN_FILE: matrix_algebra_learning_notes
  OUTPUT_DIR: math/matrix_algebra/matrix_algebra_learning_notes/build
  SOURCE_DIR: math/matrix_algebra/matrix_algebra_learning_notes

jobs:
  build_latex:
    runs-on: ubuntu-latest

    # Add concurrency to prevent multiple workflows from running simultaneously
    concurrency:
      group: ${{ github.workflow }}-${{ github.ref }}
      cancel-in-progress: true

    steps:
      - name: Checkout repository
        uses: actions/checkout@v3
        with:
          fetch-depth: 0

      # Add caching for TeX Live installation
      - name: Cache TeX Live
        uses: actions/cache@v3
        with:
          path: /tmp/texlive
          key: texlive-${{ runner.os }}-${{ hashFiles('**/*.tex') }}
          restore-keys: |
            texlive-${{ runner.os }}-

      - name: Install TeX Live
        run: |
          sudo apt-get update
          sudo apt-get install -y texlive-full

      - name: Compile LaTeX document
        uses: xu-cheng/latex-action@v2
        with:
          root_file: ${{ env.MAIN_FILE }}.tex
          working_directory: ${{ env.SOURCE_DIR }}
          compiler: xelatex
          args: -pdf -file-line-error -halt-on-error -interaction=nonstopmode

      - name: Create output directory and copy PDF
        run: |
          mkdir -p ${{ env.OUTPUT_DIR }}
          cp ${{ env.SOURCE_DIR }}/${{ env.MAIN_FILE }}.pdf ${{ env.OUTPUT_DIR }}/

      - name: Verify PDF generation
        run: |
          if [ ! -f "${{ env.OUTPUT_DIR }}/${{ env.MAIN_FILE }}.pdf" ]; then
            echo "::error::PDF file was not generated successfully!"
            exit 1
          fi
          echo "::notice::PDF file was generated successfully!"

      - name: Upload PDF artifact
        uses: actions/upload-artifact@v3
        with:
          name: PDF-${{ github.sha }}
          path: ${{ env.OUTPUT_DIR }}/${{ env.MAIN_FILE }}.pdf
          if-no-files-found: error
          retention-days: 30  # Add retention period

      # Add environment check before git operations
      - name: Check deployment conditions
        id: check-conditions
        run: |
          if [ "${{ github.ref }}" != "refs/heads/main" ] && [ "${{ github.ref }}" != "refs/heads/master" ]; then
            echo "::notice::Skipping deployment - not on main/master branch"
            echo "should_deploy=false" >> $GITHUB_OUTPUT
          else
            echo "should_deploy=true" >> $GITHUB_OUTPUT
          fi

      - name: Configure Git
        if: steps.check-conditions.outputs.should_deploy == 'true'
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          git config --global user.email "github-actions[bot]@users.noreply.github.com"
          git config --global user.name "github-actions[bot]"

      - name: Commit and push PDF
        if: steps.check-conditions.outputs.should_deploy == 'true'
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          VERSION=$(date +'%Y%m%d_%H%M%S')
          cp ${{ env.OUTPUT_DIR }}/${{ env.MAIN_FILE }}.pdf ${{ env.OUTPUT_DIR }}/${{ env.MAIN_FILE }}_v${VERSION}.pdf
          git add ${{ env.OUTPUT_DIR }}/${{ env.MAIN_FILE }}.pdf
          git add ${{ env.OUTPUT_DIR }}/${{ env.MAIN_FILE }}_v${VERSION}.pdf

          # More descriptive commit message
          git commit -m "üìÑ Update PDF documentation

          Version: ${VERSION}
          Commit: ${{ github.sha }}
          Triggered by: ${{ github.event_name }}" || echo "No changes to commit"

          git push origin HEAD:${{ github.ref_name }}

      - name: Create issue on failure
        if: failure()
        uses: actions/github-script@v6
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          script: |
            const issueBody = `
            # LaTeX Compilation Failed

            - Commit: [\`${context.sha.substring(0, 7)}\`](${context.payload.repository.html_url}/commit/${context.sha})
            - Workflow: [${context.workflow}](${context.payload.repository.html_url}/actions/runs/${context.runId})
            - Branch: \`${context.ref}\`

            Please check the [workflow logs](${context.payload.repository.html_url}/actions/runs/${context.runId}) for detailed error information.
            `;

            await github.rest.issues.create({
              owner: context.repo.owner,
              repo: context.repo.repo,
              title: '‚ùå LaTeX Compilation Failed',
              body: issueBody,
              labels: ['bug', 'documentation']
            });